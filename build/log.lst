ARM GAS  D:\noval\Temp\ccWuIDJj.s 			page 1


   1              		.cpu cortex-m23
   2              		.arch armv8-m.base
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"log.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/log.c"
  18              		.section	.rodata.EM_LOGLEVELGet.str1.4,"aMS",%progbits,1
  19              		.align	2
  20              	.LC0:
  21 0000 44454255 		.ascii	"DEBUG\000"
  21      4700
  22 0006 0000     		.align	2
  23              	.LC1:
  24 0008 494E464F 		.ascii	"INFO\000"
  24      00
  25 000d 000000   		.align	2
  26              	.LC2:
  27 0010 5741524E 		.ascii	"WARNING\000"
  27      494E4700 
  28              		.align	2
  29              	.LC3:
  30 0018 4552524F 		.ascii	"ERROR\000"
  30      5200
  31 001e 0000     		.align	2
  32              	.LC4:
  33 0020 46415441 		.ascii	"FATAL\000"
  33      4C00
  34 0026 0000     		.align	2
  35              	.LC5:
  36 0028 554E4B4E 		.ascii	"UNKNOWN\000"
  36      4F574E00 
  37              		.section	.text.EM_LOGLEVELGet,"ax",%progbits
  38              		.align	1
  39              		.global	EM_LOGLEVELGet
  40              		.syntax unified
  41              		.code	16
  42              		.thumb_func
  44              	EM_LOGLEVELGet:
  45              	.LVL0:
  46              	.LFB3:
   1:Core/Src/log.c **** #include "log.h"
   2:Core/Src/log.c **** 
   3:Core/Src/log.c **** char * EM_LOGLEVELGet(const int level){
  47              		.loc 1 3 39 view -0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
ARM GAS  D:\noval\Temp\ccWuIDJj.s 			page 2


  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
   4:Core/Src/log.c **** 	switch (level)
  52              		.loc 1 4 2 view .LVU1
  53 0000 0428     		cmp	r0, #4
  54 0002 17D8     		bhi	.L2
  55 0004 8000     		lsls	r0, r0, #2
  56              	.LVL1:
  57              		.loc 1 4 2 is_stmt 0 view .LVU2
  58 0006 104B     		ldr	r3, .L10
  59 0008 1B58     		ldr	r3, [r3, r0]
  60 000a 9F46     		mov	pc, r3
  61              		.section	.rodata.EM_LOGLEVELGet,"a",%progbits
  62              		.align	2
  63              	.L4:
  64 0000 0C000000 		.word	.L8
  65 0004 3E000000 		.word	.L9
  66 0008 16000000 		.word	.L6
  67 000c 20000000 		.word	.L5
  68 0010 2A000000 		.word	.L3
  69              		.section	.text.EM_LOGLEVELGet
  70              	.L8:
  71 000c 40F20000 		movw	r0, #:lower16:.LC0
  72 0010 C0F20000 		movt	r0, #:upper16:.LC0
  73              	.L1:
   5:Core/Src/log.c **** 	{
   6:Core/Src/log.c **** 		case LOG_DEBUG:
   7:Core/Src/log.c **** 			return "DEBUG";
   8:Core/Src/log.c **** 		case LOG_INFO:
   9:Core/Src/log.c **** 			return "INFO";
  10:Core/Src/log.c **** 		case LOG_WARN:
  11:Core/Src/log.c **** 			return "WARNING";
  12:Core/Src/log.c **** 		case LOG_ERROR:
  13:Core/Src/log.c **** 			return "ERROR";
  14:Core/Src/log.c **** 		case LOG_FATAL:
  15:Core/Src/log.c **** 			return "FATAL";
  16:Core/Src/log.c **** 		default:
  17:Core/Src/log.c **** 			return "UNKNOWN";
  18:Core/Src/log.c **** 	}
  19:Core/Src/log.c **** }
  74              		.loc 1 19 1 view .LVU3
  75              		@ sp needed
  76 0014 7047     		bx	lr
  77              	.L6:
  11:Core/Src/log.c **** 		case LOG_ERROR:
  78              		.loc 1 11 4 is_stmt 1 view .LVU4
  11:Core/Src/log.c **** 		case LOG_ERROR:
  79              		.loc 1 11 11 is_stmt 0 view .LVU5
  80 0016 40F20000 		movw	r0, #:lower16:.LC2
  81 001a C0F20000 		movt	r0, #:upper16:.LC2
  82 001e F9E7     		b	.L1
  83              	.L5:
  13:Core/Src/log.c **** 		case LOG_FATAL:
  84              		.loc 1 13 4 is_stmt 1 view .LVU6
  13:Core/Src/log.c **** 		case LOG_FATAL:
  85              		.loc 1 13 11 is_stmt 0 view .LVU7
  86 0020 40F20000 		movw	r0, #:lower16:.LC3
ARM GAS  D:\noval\Temp\ccWuIDJj.s 			page 3


  87 0024 C0F20000 		movt	r0, #:upper16:.LC3
  88 0028 F4E7     		b	.L1
  89              	.L3:
  15:Core/Src/log.c **** 		default:
  90              		.loc 1 15 4 is_stmt 1 view .LVU8
  15:Core/Src/log.c **** 		default:
  91              		.loc 1 15 11 is_stmt 0 view .LVU9
  92 002a 40F20000 		movw	r0, #:lower16:.LC4
  93 002e C0F20000 		movt	r0, #:upper16:.LC4
  94 0032 EFE7     		b	.L1
  95              	.LVL2:
  96              	.L2:
  17:Core/Src/log.c **** 	}
  97              		.loc 1 17 4 is_stmt 1 view .LVU10
  17:Core/Src/log.c **** 	}
  98              		.loc 1 17 11 is_stmt 0 view .LVU11
  99 0034 40F20000 		movw	r0, #:lower16:.LC5
 100              	.LVL3:
  17:Core/Src/log.c **** 	}
 101              		.loc 1 17 11 view .LVU12
 102 0038 C0F20000 		movt	r0, #:upper16:.LC5
 103 003c EAE7     		b	.L1
 104              	.L9:
   9:Core/Src/log.c **** 		case LOG_WARN:
 105              		.loc 1 9 11 view .LVU13
 106 003e 40F20000 		movw	r0, #:lower16:.LC1
 107 0042 C0F20000 		movt	r0, #:upper16:.LC1
 108 0046 E5E7     		b	.L1
 109              	.L11:
 110              		.align	2
 111              	.L10:
 112 0048 00000000 		.word	.L4
 113              		.cfi_endproc
 114              	.LFE3:
 116              		.section	.text.EM_LOG,"ax",%progbits
 117              		.align	1
 118              		.global	EM_LOG
 119              		.syntax unified
 120              		.code	16
 121              		.thumb_func
 123              	EM_LOG:
 124              	.LVL4:
 125              	.LFB4:
  20:Core/Src/log.c **** 
  21:Core/Src/log.c **** void EM_LOG(const int level, const char *func, \
  22:Core/Src/log.c **** 		const int line, const char *fmt, ...){
 126              		.loc 1 22 40 is_stmt 1 view -0
 127              		.cfi_startproc
 128              		@ args = 4, pretend = 4, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 1
 130              		@ link register save eliminated.
 131              		.loc 1 22 40 is_stmt 0 view .LVU15
 132 0000 08B4     		push	{r3}
 133              	.LCFI0:
 134              		.cfi_def_cfa_offset 4
  23:Core/Src/log.c **** #if OPEN_ZLOG == 1
  24:Core/Src/log.c **** 	va_list arg;
ARM GAS  D:\noval\Temp\ccWuIDJj.s 			page 4


  25:Core/Src/log.c **** 	va_start(arg, fmt);
  26:Core/Src/log.c **** 	char buf[vsnprintf(NULL, 0, fmt, arg) + 1];
  27:Core/Src/log.c **** 	va_end(arg);
  28:Core/Src/log.c **** 
  29:Core/Src/log.c **** 	// I don't know why 'va_start()' needs to be used twice, otherwise %s, %d, %c, etc will error.
  30:Core/Src/log.c **** 	va_start(arg, fmt);
  31:Core/Src/log.c **** 	vsnprintf(buf, sizeof(buf), fmt, arg);
  32:Core/Src/log.c **** 	va_end(arg);
  33:Core/Src/log.c **** 
  34:Core/Src/log.c **** 	char result[snprintf(NULL, 0, "[%s] [%s: %d] %s", EM_LOGLEVELGet(level),\
  35:Core/Src/log.c **** 			func, level, buf)];
  36:Core/Src/log.c **** 	sprintf(result, "[%s] [%s: %d] %s", EM_LOGLEVELGet(level),\
  37:Core/Src/log.c **** 			func, level, buf);
  38:Core/Src/log.c **** 
  39:Core/Src/log.c **** #if OPEN_ZLOG_DISPLAY == 1
  40:Core/Src/log.c **** 	if (level >= LOG_LEVEL)
  41:Core/Src/log.c **** 		printf("%s\n", result);
  42:Core/Src/log.c **** #endif
  43:Core/Src/log.c **** 
  44:Core/Src/log.c **** // TODO save
  45:Core/Src/log.c **** #if OPEN_ZLOG_SAVE == 1
  46:Core/Src/log.c **** 	SAVELOG(result);
  47:Core/Src/log.c **** #endif
  48:Core/Src/log.c **** #else
  49:Core/Src/log.c **** 	(void)func;
 135              		.loc 1 49 2 is_stmt 1 view .LVU16
  50:Core/Src/log.c **** 	(void)fmt;
 136              		.loc 1 50 2 view .LVU17
  51:Core/Src/log.c **** #endif
  52:Core/Src/log.c **** }
 137              		.loc 1 52 1 is_stmt 0 view .LVU18
 138              		@ sp needed
 139 0002 01B0     		add	sp, sp, #4
 140 0004 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE4:
 144              		.section	.text.savelog,"ax",%progbits
 145              		.align	1
 146              		.global	savelog
 147              		.syntax unified
 148              		.code	16
 149              		.thumb_func
 151              	savelog:
 152              	.LVL5:
 153              	.LFB5:
  53:Core/Src/log.c **** 
  54:Core/Src/log.c **** void savelog(const char *log_message, const char *file_name, const char *mode)
  55:Core/Src/log.c **** {
 154              		.loc 1 55 1 is_stmt 1 view -0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              		@ link register save eliminated.
  56:Core/Src/log.c **** #ifdef __linux__
  57:Core/Src/log.c **** 	FILE *file = NULL;
  58:Core/Src/log.c **** 
  59:Core/Src/log.c **** 	if((file = fopen(file_name, mode)) == NULL){
ARM GAS  D:\noval\Temp\ccWuIDJj.s 			page 5


  60:Core/Src/log.c **** 		perror("ERROR: ");
  61:Core/Src/log.c **** 		return ;
  62:Core/Src/log.c **** 	}
  63:Core/Src/log.c **** 
  64:Core/Src/log.c **** 	char buf[snprintf(NULL, 0, "%s", log_message) + 1];
  65:Core/Src/log.c **** 
  66:Core/Src/log.c **** 	int ssize = 0;
  67:Core/Src/log.c **** 	if((ssize = sprintf(buf, "%s\n", log_message)) <= 0){
  68:Core/Src/log.c **** 		fclose(file);
  69:Core/Src/log.c **** 		return ;
  70:Core/Src/log.c **** 	}
  71:Core/Src/log.c **** 
  72:Core/Src/log.c **** 	while(fwrite(buf, 1, ssize, file) < 0){
  73:Core/Src/log.c **** 		fclose(file);
  74:Core/Src/log.c **** 		return ;
  75:Core/Src/log.c **** 	}
  76:Core/Src/log.c **** 
  77:Core/Src/log.c **** 	fclose(file);
  78:Core/Src/log.c **** 	file = NULL;
  79:Core/Src/log.c **** #endif
  80:Core/Src/log.c **** #ifdef __arm__
  81:Core/Src/log.c **** 	// TODO
  82:Core/Src/log.c **** #endif
  83:Core/Src/log.c **** #ifdef __x86_64__
  84:Core/Src/log.c **** 	// TODO
  85:Core/Src/log.c **** #endif
  86:Core/Src/log.c **** #ifdef __i386__
  87:Core/Src/log.c **** 	// TODO
  88:Core/Src/log.c **** #endif
  89:Core/Src/log.c **** }       
 159              		.loc 1 89 1 view .LVU20
 160              		@ sp needed
 161 0000 7047     		bx	lr
 162              		.cfi_endproc
 163              	.LFE5:
 165              		.text
 166              	.Letext0:
 167              		.file 2 "Core/Inc/log.h"
ARM GAS  D:\noval\Temp\ccWuIDJj.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 log.c
D:\noval\Temp\ccWuIDJj.s:19     .rodata.EM_LOGLEVELGet.str1.4:00000000 $d
D:\noval\Temp\ccWuIDJj.s:20     .rodata.EM_LOGLEVELGet.str1.4:00000000 .LC0
D:\noval\Temp\ccWuIDJj.s:23     .rodata.EM_LOGLEVELGet.str1.4:00000008 .LC1
D:\noval\Temp\ccWuIDJj.s:26     .rodata.EM_LOGLEVELGet.str1.4:00000010 .LC2
D:\noval\Temp\ccWuIDJj.s:29     .rodata.EM_LOGLEVELGet.str1.4:00000018 .LC3
D:\noval\Temp\ccWuIDJj.s:32     .rodata.EM_LOGLEVELGet.str1.4:00000020 .LC4
D:\noval\Temp\ccWuIDJj.s:35     .rodata.EM_LOGLEVELGet.str1.4:00000028 .LC5
D:\noval\Temp\ccWuIDJj.s:38     .text.EM_LOGLEVELGet:00000000 $t
D:\noval\Temp\ccWuIDJj.s:44     .text.EM_LOGLEVELGet:00000000 EM_LOGLEVELGet
D:\noval\Temp\ccWuIDJj.s:62     .rodata.EM_LOGLEVELGet:00000000 $d
D:\noval\Temp\ccWuIDJj.s:112    .text.EM_LOGLEVELGet:00000048 $d
D:\noval\Temp\ccWuIDJj.s:117    .text.EM_LOG:00000000 $t
D:\noval\Temp\ccWuIDJj.s:123    .text.EM_LOG:00000000 EM_LOG
D:\noval\Temp\ccWuIDJj.s:145    .text.savelog:00000000 $t
D:\noval\Temp\ccWuIDJj.s:151    .text.savelog:00000000 savelog

NO UNDEFINED SYMBOLS
